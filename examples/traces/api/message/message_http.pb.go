// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	transport "github.com/go-kratos/kratos/v2/transport"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	mux "github.com/gorilla/mux"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = new(middleware.Middleware)
var _ = new(transport.Transporter)
var _ = binding.BindVars
var _ = mux.NewRouter

const _ = http.SupportPackageIsVersion1

type MessageServiceHandler interface {
	GetUserMessage(context.Context, *GetUserMessageRequest) (*GetUserMessageReply, error)
}

func RegisterMessageServiceHTTPServer(s *http.Server, srv MessageServiceHandler) {
	r := s.Route("/")

	r.GET("/v1/message/user/{id}/{count}", func(ctx http.Context) error {
		var in GetUserMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}

		if err := binding.BindVars(ctx.Vars(), &in); err != nil {
			return err
		}

		transport.SetMethod(ctx, "/api.message.v1.MessageService/GetUserMessage")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserMessage(ctx, req.(*GetUserMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserMessageReply)
		return ctx.Result(200, reply)
	})

}

type MessageServiceHTTPClient interface {
	GetUserMessage(ctx context.Context, req *GetUserMessageRequest, opts ...http.CallOption) (rsp *GetUserMessageReply, err error)
}

type MessageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMessageServiceHTTPClient(client *http.Client) MessageServiceHTTPClient {
	return &MessageServiceHTTPClientImpl{client}
}

func (c *MessageServiceHTTPClientImpl) GetUserMessage(ctx context.Context, in *GetUserMessageRequest, opts ...http.CallOption) (*GetUserMessageReply, error) {
	var out GetUserMessageReply
	path := binding.EncodePath("GET", "/v1/message/user/{id}/{count}", in)
	opts = append(opts, http.Method("/api.message.v1.MessageService/GetUserMessage"))

	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)

	return &out, err
}
